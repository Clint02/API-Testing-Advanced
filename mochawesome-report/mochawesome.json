{
  "stats": {
    "suites": 6,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-02T15:16:28.959Z",
    "end": "2024-06-02T15:16:55.811Z",
    "duration": 26852,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "69c76685-5ef7-46b3-9c7c-92c1fd42586c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2d4d3b79-43e5-4089-9086-4034b7ef6145",
          "title": "DELETE DATA API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\tests\\delete-api.test.js",
          "file": "\\tests\\delete-api.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"DELETE DATA API TESTING\"",
              "fullTitle": "DELETE DATA API TESTING \"before each\" hook in \"DELETE DATA API TESTING\"",
              "timedOut": false,
              "duration": 565,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = await axios.delete(`${baseURL}/products/1`)",
              "err": {},
              "uuid": "0753c00b-41c0-4bee-b6ab-27a193d2bbe9",
              "parentUUID": "2d4d3b79-43e5-4089-9086-4034b7ef6145",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200",
              "fullTitle": "DELETE DATA API TESTING should return status 200",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.status).to.equal(200)",
              "err": {},
              "uuid": "ff91d202-5a0e-46e1-a687-4e72fb6cef2b",
              "parentUUID": "2d4d3b79-43e5-4089-9086-4034b7ef6145",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match delete schema",
              "fullTitle": "DELETE DATA API TESTING should match delete schema",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data).to.be.jsonSchema(deleteSchema)",
              "err": {},
              "uuid": "cf890e87-b35a-4f79-89e3-d728b75c7227",
              "parentUUID": "2d4d3b79-43e5-4089-9086-4034b7ef6145",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should indicate isDeleted is true",
              "fullTitle": "DELETE DATA API TESTING should indicate isDeleted is true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data.isDeleted).to.be.true",
              "err": {},
              "uuid": "e79e4b08-520b-4d4e-8a60-e0a77b259f86",
              "parentUUID": "2d4d3b79-43e5-4089-9086-4034b7ef6145",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent product",
              "fullTitle": "DELETE DATA API TESTING should return 404 for non-existent product",
              "timedOut": false,
              "duration": 568,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.delete(`${baseURL}/products/9999`)\n} catch (error) {\n  expect(error.response.status).to.equal(404)\n}",
              "err": {},
              "uuid": "04e9470a-67b0-4c18-b877-590ad4793c4c",
              "parentUUID": "2d4d3b79-43e5-4089-9086-4034b7ef6145",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return appropriate error message for non-existent product",
              "fullTitle": "DELETE DATA API TESTING should return appropriate error message for non-existent product",
              "timedOut": false,
              "duration": 567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.delete(`${baseURL}/products/9999`)\n} catch (error) {\n  expect(error.response.data.message).to.equal(\n    \"Product with id '9999' not found\",\n  )\n}",
              "err": {},
              "uuid": "c0f8bbef-4944-4f7c-8967-39b0691e0d99",
              "parentUUID": "2d4d3b79-43e5-4089-9086-4034b7ef6145",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff91d202-5a0e-46e1-a687-4e72fb6cef2b",
            "cf890e87-b35a-4f79-89e3-d728b75c7227",
            "e79e4b08-520b-4d4e-8a60-e0a77b259f86",
            "04e9470a-67b0-4c18-b877-590ad4793c4c",
            "c0f8bbef-4944-4f7c-8967-39b0691e0d99"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1170,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e1d3a630-28a2-45f9-94f8-0e8cd3470e60",
          "title": "GET ALL PRODUCTS API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\tests\\get-all-api.test.js",
          "file": "\\tests\\get-all-api.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GET ALL PRODUCTS API TESTING\"",
              "fullTitle": "GET ALL PRODUCTS API TESTING \"before each\" hook in \"GET ALL PRODUCTS API TESTING\"",
              "timedOut": false,
              "duration": 1136,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "paginatedRes = await axios.get(`${baseURL}/products?limit=2&skip=6`)\nres = await axios.get(`${baseURL}/products`)",
              "err": {},
              "uuid": "10ba420d-699a-47e9-bc7b-bb04efed57cd",
              "parentUUID": "e1d3a630-28a2-45f9-94f8-0e8cd3470e60",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200",
              "fullTitle": "GET ALL PRODUCTS API TESTING should return status 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.status).to.equal(200)",
              "err": {},
              "uuid": "b6014582-9dd8-41c9-ad29-62b5b986a6f6",
              "parentUUID": "e1d3a630-28a2-45f9-94f8-0e8cd3470e60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match products schema",
              "fullTitle": "GET ALL PRODUCTS API TESTING should match products schema",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data).to.be.jsonSchema(productsSchema)",
              "err": {},
              "uuid": "d797165f-514e-4855-8e84-042916f14c54",
              "parentUUID": "e1d3a630-28a2-45f9-94f8-0e8cd3470e60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 with pagination",
              "fullTitle": "GET ALL PRODUCTS API TESTING should return status 200 with pagination",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(paginatedRes.status).to.equal(200)",
              "err": {},
              "uuid": "4d4bba87-65ca-44c1-a745-89f23e7e27b8",
              "parentUUID": "e1d3a630-28a2-45f9-94f8-0e8cd3470e60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match products schema with pagination",
              "fullTitle": "GET ALL PRODUCTS API TESTING should match products schema with pagination",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(paginatedRes.data).to.be.jsonSchema(productsSchema)",
              "err": {},
              "uuid": "8a217863-2e9e-4fc1-94ba-4425750d1664",
              "parentUUID": "e1d3a630-28a2-45f9-94f8-0e8cd3470e60",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b6014582-9dd8-41c9-ad29-62b5b986a6f6",
            "d797165f-514e-4855-8e84-042916f14c54",
            "4d4bba87-65ca-44c1-a745-89f23e7e27b8",
            "8a217863-2e9e-4fc1-94ba-4425750d1664"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d25fbbc1-59fe-4e4c-95fe-415b78cb60ee",
          "title": "GET RESTRICTED DATA API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\tests\\get-restricted-api.test.js",
          "file": "\\tests\\get-restricted-api.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GET RESTRICTED DATA API TESTING\"",
              "fullTitle": "GET RESTRICTED DATA API TESTING \"before each\" hook in \"GET RESTRICTED DATA API TESTING\"",
              "timedOut": false,
              "duration": 572,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authResponse = await axios.post(`${baseURL}/auth/login`, {\n  username: 'alexanderj',\n  password: 'alexanderjpass',\n})\ntoken = authResponse.data.token",
              "err": {},
              "uuid": "6e28d88b-5e00-4ce3-88a2-74416a980f5a",
              "parentUUID": "d25fbbc1-59fe-4e4c-95fe-415b78cb60ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get auth token",
              "fullTitle": "GET RESTRICTED DATA API TESTING should get auth token",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(token).to.be.a('string')",
              "err": {},
              "uuid": "20011935-4f52-4bee-9a24-e38ee577ecdf",
              "parentUUID": "d25fbbc1-59fe-4e4c-95fe-415b78cb60ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should access restricted data with valid token",
              "fullTitle": "GET RESTRICTED DATA API TESTING should access restricted data with valid token",
              "timedOut": false,
              "duration": 571,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authConfig = {\n  headers: { Authorization: `Bearer ${token}` },\n}\nconst secureResponse = await axios.get(`${baseURL}/auth/users`, authConfig)\nexpect(secureResponse.status).to.equal(200)",
              "err": {},
              "uuid": "8c6b73de-5e3b-4026-8e60-42a4075110eb",
              "parentUUID": "d25fbbc1-59fe-4e4c-95fe-415b78cb60ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match users schema",
              "fullTitle": "GET RESTRICTED DATA API TESTING should match users schema",
              "timedOut": false,
              "duration": 575,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authConfig = {\n  headers: { Authorization: `Bearer ${token}` },\n}\nconst secureResponse = await axios.get(`${baseURL}/auth/users`, authConfig)\nexpect(secureResponse.data).to.be.jsonSchema(usersSchema)",
              "err": {},
              "uuid": "1c883b00-6a83-4038-930e-e9198c840e31",
              "parentUUID": "d25fbbc1-59fe-4e4c-95fe-415b78cb60ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 401 for invalid token",
              "fullTitle": "GET RESTRICTED DATA API TESTING should return 401 for invalid token",
              "timedOut": false,
              "duration": 566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const authConfig = {\n    headers: { Authorization: 'Bearer invalidtoken' },\n  }\n  await axios.get(`${baseURL}/auth/users`, authConfig)\n} catch (error) {\n  expect(error.response.status).to.equal(401)\n}",
              "err": {},
              "uuid": "ebdbdea0-df61-4709-a67d-bb6fa7568014",
              "parentUUID": "d25fbbc1-59fe-4e4c-95fe-415b78cb60ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return appropriate error message for invalid token",
              "fullTitle": "GET RESTRICTED DATA API TESTING should return appropriate error message for invalid token",
              "timedOut": false,
              "duration": 570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const authConfig = {\n    headers: { Authorization: 'Bearer invalidtoken' },\n  }\n  await axios.get(`${baseURL}/auth/users`, authConfig)\n} catch (error) {\n  expect(error.response.data.message).to.equal('Invalid/Expired Token!')\n}",
              "err": {},
              "uuid": "a76fb5a4-5487-4f74-88da-c603411b4667",
              "parentUUID": "d25fbbc1-59fe-4e4c-95fe-415b78cb60ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 for invalid signature",
              "fullTitle": "GET RESTRICTED DATA API TESTING should return 500 for invalid signature",
              "timedOut": false,
              "duration": 573,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  const authConfig = {\n    headers: { Authorization: `Bearer ${defaultToken}` },\n  }\n  await axios.get(`${baseURL}/auth/users`, authConfig)\n} catch (error) {\n  expect(error.response.status).to.equal(500)\n}",
              "err": {},
              "uuid": "6ab9757c-fd4b-48a5-a681-e306e5b66ae3",
              "parentUUID": "d25fbbc1-59fe-4e4c-95fe-415b78cb60ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return appropriate error message for invalid signature",
              "fullTitle": "GET RESTRICTED DATA API TESTING should return appropriate error message for invalid signature",
              "timedOut": false,
              "duration": 573,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  const authConfig = {\n    headers: { Authorization: `Bearer ${defaultToken}` },\n  }\n  await axios.get(`${baseURL}/auth/users`, authConfig)\n} catch (error) {\n  expect(error.response.data.message).to.equal('invalid signature')\n}",
              "err": {},
              "uuid": "c679df50-2a43-4fdc-bbfb-2d86b9560725",
              "parentUUID": "d25fbbc1-59fe-4e4c-95fe-415b78cb60ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "20011935-4f52-4bee-9a24-e38ee577ecdf",
            "8c6b73de-5e3b-4026-8e60-42a4075110eb",
            "1c883b00-6a83-4038-930e-e9198c840e31",
            "ebdbdea0-df61-4709-a67d-bb6fa7568014",
            "a76fb5a4-5487-4f74-88da-c603411b4667",
            "6ab9757c-fd4b-48a5-a681-e306e5b66ae3",
            "c679df50-2a43-4fdc-bbfb-2d86b9560725"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3428,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "78cfb331-24eb-4c6a-a5f3-7ca53f3fb9d4",
          "title": "GET SINGLE PRODUCT API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\tests\\get-single-api.test.js",
          "file": "\\tests\\get-single-api.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GET SINGLE PRODUCT API TESTING\"",
              "fullTitle": "GET SINGLE PRODUCT API TESTING \"before each\" hook in \"GET SINGLE PRODUCT API TESTING\"",
              "timedOut": false,
              "duration": 568,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = await axios.get(`${baseURL}/products/5`)",
              "err": {},
              "uuid": "07504916-76de-4a4c-bb2c-f940511ccac8",
              "parentUUID": "78cfb331-24eb-4c6a-a5f3-7ca53f3fb9d4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200",
              "fullTitle": "GET SINGLE PRODUCT API TESTING should return status 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.status).to.equal(200)",
              "err": {},
              "uuid": "711018e4-5c4c-4837-8628-2e28dd9601c0",
              "parentUUID": "78cfb331-24eb-4c6a-a5f3-7ca53f3fb9d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match product schema",
              "fullTitle": "GET SINGLE PRODUCT API TESTING should match product schema",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data).to.be.jsonSchema(productSchema)",
              "err": {},
              "uuid": "42f4f220-86de-48e4-a129-1544a1b4dad4",
              "parentUUID": "78cfb331-24eb-4c6a-a5f3-7ca53f3fb9d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent product",
              "fullTitle": "GET SINGLE PRODUCT API TESTING should return 404 for non-existent product",
              "timedOut": false,
              "duration": 574,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.get(`${baseURL}/products/9999`)\n} catch (error) {\n  expect(error.response.status).to.equal(404)\n}",
              "err": {},
              "uuid": "712dc6bc-fc5b-4280-9d77-fab3bad968c0",
              "parentUUID": "78cfb331-24eb-4c6a-a5f3-7ca53f3fb9d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return appropriate error message for non-existent product",
              "fullTitle": "GET SINGLE PRODUCT API TESTING should return appropriate error message for non-existent product",
              "timedOut": false,
              "duration": 568,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.get(`${baseURL}/products/9999`)\n} catch (error) {\n  expect(error.response.data.message).to.equal(\n    \"Product with id '9999' not found\",\n  )\n}",
              "err": {},
              "uuid": "bb19bd76-0fb0-462b-8e74-83b527c44bce",
              "parentUUID": "78cfb331-24eb-4c6a-a5f3-7ca53f3fb9d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "711018e4-5c4c-4837-8628-2e28dd9601c0",
            "42f4f220-86de-48e4-a129-1544a1b4dad4",
            "712dc6bc-fc5b-4280-9d77-fab3bad968c0",
            "bb19bd76-0fb0-462b-8e74-83b527c44bce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1144,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3770cf1a-8eca-4f8c-807d-520c2afdefa1",
          "title": "POST DATA API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\tests\\post-api.test.js",
          "file": "\\tests\\post-api.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST DATA API TESTING\"",
              "fullTitle": "POST DATA API TESTING \"before each\" hook in \"POST DATA API TESTING\"",
              "timedOut": false,
              "duration": 571,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = await axios.post(`${baseURL}/products/add`, {\n  title: 'Website Testing',\n  description: 'This is a new product.',\n  category: 'Testing',\n  price: 6.25,\n})",
              "err": {},
              "uuid": "d246756a-813f-40bd-ab6b-55c5c0f715f2",
              "parentUUID": "3770cf1a-8eca-4f8c-807d-520c2afdefa1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 201",
              "fullTitle": "POST DATA API TESTING should return status 201",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.status).to.equal(201)",
              "err": {},
              "uuid": "bff846a4-a2c0-424e-964a-1890040cd9aa",
              "parentUUID": "3770cf1a-8eca-4f8c-807d-520c2afdefa1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match product schema",
              "fullTitle": "POST DATA API TESTING should match product schema",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data).to.be.jsonSchema(productSchema)",
              "err": {},
              "uuid": "7fdb91f3-5c3e-47a8-8471-f161c0f7e411",
              "parentUUID": "3770cf1a-8eca-4f8c-807d-520c2afdefa1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 201 even with missing fields",
              "fullTitle": "POST DATA API TESTING should return 201 even with missing fields",
              "timedOut": false,
              "duration": 572,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.post(`${baseURL}/products/add`, {\n    price: 6.25,\n  })\n} catch (error) {\n  expect(error.response.status).to.equal(201)\n}",
              "err": {},
              "uuid": "3ddcae1f-0794-4b2f-9105-7a6de1fba9cb",
              "parentUUID": "3770cf1a-8eca-4f8c-807d-520c2afdefa1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 201 even with invalid data",
              "fullTitle": "POST DATA API TESTING should return 201 even with invalid data",
              "timedOut": false,
              "duration": 565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.post(`${baseURL}/products/add`, {\n    title: 6.25,\n    price: 'Website Testing',\n  })\n} catch (error) {\n  expect(error.response.status).to.equal(201)\n}",
              "err": {},
              "uuid": "a4172dfb-86a1-4616-83bc-f489a7841afd",
              "parentUUID": "3770cf1a-8eca-4f8c-807d-520c2afdefa1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bff846a4-a2c0-424e-964a-1890040cd9aa",
            "7fdb91f3-5c3e-47a8-8471-f161c0f7e411",
            "3ddcae1f-0794-4b2f-9105-7a6de1fba9cb",
            "a4172dfb-86a1-4616-83bc-f489a7841afd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e9d1a7e2-3c95-4b94-b90d-272858c5214d",
          "title": "PUT DATA API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\tests\\put-api.test.js",
          "file": "\\tests\\put-api.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT DATA API TESTING\"",
              "fullTitle": "PUT DATA API TESTING \"before each\" hook in \"PUT DATA API TESTING\"",
              "timedOut": false,
              "duration": 564,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = await axios.put(`${baseURL}/products/5`, {\n  title: 'Updated Product',\n  description: 'This product has been updated.',\n})",
              "err": {},
              "uuid": "ede3d6c0-7900-477e-ac46-d8e18b1e9165",
              "parentUUID": "e9d1a7e2-3c95-4b94-b90d-272858c5214d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200",
              "fullTitle": "PUT DATA API TESTING should return status 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.status).to.equal(200)",
              "err": {},
              "uuid": "fb978329-5208-441a-851a-1382c1674056",
              "parentUUID": "e9d1a7e2-3c95-4b94-b90d-272858c5214d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match product schema",
              "fullTitle": "PUT DATA API TESTING should match product schema",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data).to.be.jsonSchema(productSchema)",
              "err": {},
              "uuid": "d7a36e67-f54e-4915-918f-9e25f83af59b",
              "parentUUID": "e9d1a7e2-3c95-4b94-b90d-272858c5214d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent product",
              "fullTitle": "PUT DATA API TESTING should return 404 for non-existent product",
              "timedOut": false,
              "duration": 570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.put(`${baseURL}/products/9999`, {\n    title: 'Nonexistent Product',\n    description: 'Trying to update a non-existent product.',\n  })\n} catch (error) {\n  expect(error.response.status).to.equal(404)\n}",
              "err": {},
              "uuid": "3f3edd39-8dd1-47fe-b1e1-c45bbd4b9441",
              "parentUUID": "e9d1a7e2-3c95-4b94-b90d-272858c5214d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return appropriate error message for non-existent product",
              "fullTitle": "PUT DATA API TESTING should return appropriate error message for non-existent product",
              "timedOut": false,
              "duration": 563,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.put(`${baseURL}/products/9999`, {\n    title: 'Nonexistent Product',\n    description: 'Trying to update a non-existent product.',\n  })\n} catch (error) {\n  expect(error.response.data.message).to.equal(\n    \"Product with id '9999' not found\",\n  )\n}",
              "err": {},
              "uuid": "56b72def-c476-46c3-96bb-d139c8474c82",
              "parentUUID": "e9d1a7e2-3c95-4b94-b90d-272858c5214d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb978329-5208-441a-851a-1382c1674056",
            "d7a36e67-f54e-4915-918f-9e25f83af59b",
            "3f3edd39-8dd1-47fe-b1e1-c45bbd4b9441",
            "56b72def-c476-46c3-96bb-d139c8474c82"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}