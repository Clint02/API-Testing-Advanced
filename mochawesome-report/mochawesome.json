{
  "stats": {
    "suites": 6,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-02T07:14:19.562Z",
    "end": "2024-06-02T07:14:45.797Z",
    "duration": 26235,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0d0cf0bc-f5ec-4cfa-87e9-b1b6cd046d93",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5e866a01-94db-430f-b637-39e9e3d94f39",
          "title": "GET SINGLE PRODUCT API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\index.test.js",
          "file": "\\index.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GET SINGLE PRODUCT API TESTING\"",
              "fullTitle": "GET SINGLE PRODUCT API TESTING \"before each\" hook in \"GET SINGLE PRODUCT API TESTING\"",
              "timedOut": false,
              "duration": 571,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = await axios.get(`${baseURL}/products/5`)",
              "err": {},
              "uuid": "2b8996ff-bbfe-4c1f-982c-018162c08a2c",
              "parentUUID": "5e866a01-94db-430f-b637-39e9e3d94f39",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200",
              "fullTitle": "GET SINGLE PRODUCT API TESTING should return status 200",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.status).to.equal(200)",
              "err": {},
              "uuid": "4a01d8dc-bdd0-42a8-9642-ea20bea1941d",
              "parentUUID": "5e866a01-94db-430f-b637-39e9e3d94f39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match product schema",
              "fullTitle": "GET SINGLE PRODUCT API TESTING should match product schema",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data).to.be.jsonSchema(productSchema)",
              "err": {},
              "uuid": "d932ad5c-4eb7-46fd-9bea-786cea6bb91f",
              "parentUUID": "5e866a01-94db-430f-b637-39e9e3d94f39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent product",
              "fullTitle": "GET SINGLE PRODUCT API TESTING should return 404 for non-existent product",
              "timedOut": false,
              "duration": 566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.get(`${baseURL}/products/9999`)\n} catch (error) {\n  expect(error.response.status).to.equal(404)\n}",
              "err": {},
              "uuid": "e6a68881-99d4-4b1b-b00f-3867de7339cb",
              "parentUUID": "5e866a01-94db-430f-b637-39e9e3d94f39",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return appropriate error message for non-existent product",
              "fullTitle": "GET SINGLE PRODUCT API TESTING should return appropriate error message for non-existent product",
              "timedOut": false,
              "duration": 560,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.get(`${baseURL}/products/9999`)\n} catch (error) {\n  expect(error.response.data.message).to.equal(\n    \"Product with id '9999' not found\",\n  )\n}",
              "err": {},
              "uuid": "4d70ab17-9115-4b26-8530-6937e86eb6fc",
              "parentUUID": "5e866a01-94db-430f-b637-39e9e3d94f39",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a01d8dc-bdd0-42a8-9642-ea20bea1941d",
            "d932ad5c-4eb7-46fd-9bea-786cea6bb91f",
            "e6a68881-99d4-4b1b-b00f-3867de7339cb",
            "4d70ab17-9115-4b26-8530-6937e86eb6fc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1162,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "906e3bdc-2ffd-40cf-9f45-2db593a358f3",
          "title": "GET ALL PRODUCTS API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\index.test.js",
          "file": "\\index.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GET ALL PRODUCTS API TESTING\"",
              "fullTitle": "GET ALL PRODUCTS API TESTING \"before each\" hook in \"GET ALL PRODUCTS API TESTING\"",
              "timedOut": false,
              "duration": 1140,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "paginatedRes = await axios.get(`${baseURL}/products?limit=2&skip=6`)\nres = await axios.get(`${baseURL}/products`)",
              "err": {},
              "uuid": "1a950ad2-d8e6-433a-a914-e60ef2400228",
              "parentUUID": "906e3bdc-2ffd-40cf-9f45-2db593a358f3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200",
              "fullTitle": "GET ALL PRODUCTS API TESTING should return status 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.status).to.equal(200)",
              "err": {},
              "uuid": "81557383-e286-4d7d-98c4-63847f8740b9",
              "parentUUID": "906e3bdc-2ffd-40cf-9f45-2db593a358f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match products schema",
              "fullTitle": "GET ALL PRODUCTS API TESTING should match products schema",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data).to.be.jsonSchema(productsSchema)",
              "err": {},
              "uuid": "3513934a-6a08-499f-a023-ac41edc88402",
              "parentUUID": "906e3bdc-2ffd-40cf-9f45-2db593a358f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 with pagination",
              "fullTitle": "GET ALL PRODUCTS API TESTING should return status 200 with pagination",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(paginatedRes.status).to.equal(200)",
              "err": {},
              "uuid": "cc1f6463-dd76-4507-9fa2-5a1e124b79bb",
              "parentUUID": "906e3bdc-2ffd-40cf-9f45-2db593a358f3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match products schema with pagination",
              "fullTitle": "GET ALL PRODUCTS API TESTING should match products schema with pagination",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(paginatedRes.data).to.be.jsonSchema(productsSchema)",
              "err": {},
              "uuid": "f6c0c746-b062-4876-8a8f-77e3cfc01100",
              "parentUUID": "906e3bdc-2ffd-40cf-9f45-2db593a358f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81557383-e286-4d7d-98c4-63847f8740b9",
            "3513934a-6a08-499f-a023-ac41edc88402",
            "cc1f6463-dd76-4507-9fa2-5a1e124b79bb",
            "f6c0c746-b062-4876-8a8f-77e3cfc01100"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ec09008c-3b3c-4cf8-95e1-19b4adac7570",
          "title": "POST DATA API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\index.test.js",
          "file": "\\index.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST DATA API TESTING\"",
              "fullTitle": "POST DATA API TESTING \"before each\" hook in \"POST DATA API TESTING\"",
              "timedOut": false,
              "duration": 569,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = await axios.post(`${baseURL}/products/add`, {\n  title: 'Website Testing',\n  description: 'This is a new product.',\n  category: 'Testing',\n  price: 6.25,\n})",
              "err": {},
              "uuid": "4ac64644-4275-4fca-bac0-ad574ae348c6",
              "parentUUID": "ec09008c-3b3c-4cf8-95e1-19b4adac7570",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 201",
              "fullTitle": "POST DATA API TESTING should return status 201",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.status).to.equal(201)",
              "err": {},
              "uuid": "23d7e217-6fff-4bb9-89dc-694628e9cf98",
              "parentUUID": "ec09008c-3b3c-4cf8-95e1-19b4adac7570",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match product schema",
              "fullTitle": "POST DATA API TESTING should match product schema",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data).to.be.jsonSchema(productSchema)",
              "err": {},
              "uuid": "bf34cd1a-fbbb-4eec-92e8-2a8bfadc8599",
              "parentUUID": "ec09008c-3b3c-4cf8-95e1-19b4adac7570",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 201 even with missing fields",
              "fullTitle": "POST DATA API TESTING should return 201 even with missing fields",
              "timedOut": false,
              "duration": 570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.post(`${baseURL}/products/add`, {\n    price: 6.25,\n  })\n} catch (error) {\n  expect(error.response.status).to.equal(201)\n}",
              "err": {},
              "uuid": "a9b10407-054d-4032-a249-6b30e3bdd263",
              "parentUUID": "ec09008c-3b3c-4cf8-95e1-19b4adac7570",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 201 even with invalid data",
              "fullTitle": "POST DATA API TESTING should return 201 even with invalid data",
              "timedOut": false,
              "duration": 565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.post(`${baseURL}/products/add`, {\n    title: 6.25,\n    price: 'Website Testing',\n  })\n} catch (error) {\n  expect(error.response.status).to.equal(201)\n}",
              "err": {},
              "uuid": "6de2a547-c278-4ebb-a5d0-09f3b65d1efc",
              "parentUUID": "ec09008c-3b3c-4cf8-95e1-19b4adac7570",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "23d7e217-6fff-4bb9-89dc-694628e9cf98",
            "bf34cd1a-fbbb-4eec-92e8-2a8bfadc8599",
            "a9b10407-054d-4032-a249-6b30e3bdd263",
            "6de2a547-c278-4ebb-a5d0-09f3b65d1efc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1136,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f0ba6320-ac0b-4b23-bbce-e028b9f096c5",
          "title": "PUT DATA API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\index.test.js",
          "file": "\\index.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"PUT DATA API TESTING\"",
              "fullTitle": "PUT DATA API TESTING \"before each\" hook in \"PUT DATA API TESTING\"",
              "timedOut": false,
              "duration": 571,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = await axios.put(`${baseURL}/products/5`, {\n  title: 'Updated Product',\n  description: 'This product has been updated.',\n})",
              "err": {},
              "uuid": "76d3bf58-e671-48f0-bf70-309edbc4039a",
              "parentUUID": "f0ba6320-ac0b-4b23-bbce-e028b9f096c5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200",
              "fullTitle": "PUT DATA API TESTING should return status 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.status).to.equal(200)",
              "err": {},
              "uuid": "5c068443-3662-4f1d-bb7c-4316f738dd40",
              "parentUUID": "f0ba6320-ac0b-4b23-bbce-e028b9f096c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match product schema",
              "fullTitle": "PUT DATA API TESTING should match product schema",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data).to.be.jsonSchema(productSchema)",
              "err": {},
              "uuid": "72e2672b-6018-4c6a-bf7e-9dcef9654ca3",
              "parentUUID": "f0ba6320-ac0b-4b23-bbce-e028b9f096c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent product",
              "fullTitle": "PUT DATA API TESTING should return 404 for non-existent product",
              "timedOut": false,
              "duration": 571,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.put(`${baseURL}/products/9999`, {\n    title: 'Nonexistent Product',\n    description: 'Trying to update a non-existent product.',\n  })\n} catch (error) {\n  expect(error.response.status).to.equal(404)\n}",
              "err": {},
              "uuid": "9fd94133-e6a8-414e-9914-951e71d541ed",
              "parentUUID": "f0ba6320-ac0b-4b23-bbce-e028b9f096c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return appropriate error message for non-existent product",
              "fullTitle": "PUT DATA API TESTING should return appropriate error message for non-existent product",
              "timedOut": false,
              "duration": 570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.put(`${baseURL}/products/9999`, {\n    title: 'Nonexistent Product',\n    description: 'Trying to update a non-existent product.',\n  })\n} catch (error) {\n  expect(error.response.data.message).to.equal(\n    \"Product with id '9999' not found\",\n  )\n}",
              "err": {},
              "uuid": "1ded6040-a01c-48f7-8463-bf49e9b962ef",
              "parentUUID": "f0ba6320-ac0b-4b23-bbce-e028b9f096c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c068443-3662-4f1d-bb7c-4316f738dd40",
            "72e2672b-6018-4c6a-bf7e-9dcef9654ca3",
            "9fd94133-e6a8-414e-9914-951e71d541ed",
            "1ded6040-a01c-48f7-8463-bf49e9b962ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1141,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9f7a1035-b403-498c-b2e9-ba22da2957a9",
          "title": "DELETE DATA API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\index.test.js",
          "file": "\\index.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"DELETE DATA API TESTING\"",
              "fullTitle": "DELETE DATA API TESTING \"before each\" hook in \"DELETE DATA API TESTING\"",
              "timedOut": false,
              "duration": 559,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "res = await axios.delete(`${baseURL}/products/1`)",
              "err": {},
              "uuid": "2647c439-fe57-4416-ade2-fa4af49f12a2",
              "parentUUID": "9f7a1035-b403-498c-b2e9-ba22da2957a9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200",
              "fullTitle": "DELETE DATA API TESTING should return status 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.status).to.equal(200)",
              "err": {},
              "uuid": "d366fce2-f46c-4de8-9e25-b0cea826772b",
              "parentUUID": "9f7a1035-b403-498c-b2e9-ba22da2957a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match delete schema",
              "fullTitle": "DELETE DATA API TESTING should match delete schema",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data).to.be.jsonSchema(deleteSchema)",
              "err": {},
              "uuid": "aa5d9c03-0832-4c22-ab78-cebbfb62a584",
              "parentUUID": "9f7a1035-b403-498c-b2e9-ba22da2957a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should indicate isDeleted is true",
              "fullTitle": "DELETE DATA API TESTING should indicate isDeleted is true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(res.data.isDeleted).to.be.true",
              "err": {},
              "uuid": "a6751737-c6b8-45d8-b8e9-2ead915a0bff",
              "parentUUID": "9f7a1035-b403-498c-b2e9-ba22da2957a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent product",
              "fullTitle": "DELETE DATA API TESTING should return 404 for non-existent product",
              "timedOut": false,
              "duration": 567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.delete(`${baseURL}/products/9999`)\n} catch (error) {\n  expect(error.response.status).to.equal(404)\n}",
              "err": {},
              "uuid": "fe18d864-7112-4d4b-8384-48f51f26787c",
              "parentUUID": "9f7a1035-b403-498c-b2e9-ba22da2957a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return appropriate error message for non-existent product",
              "fullTitle": "DELETE DATA API TESTING should return appropriate error message for non-existent product",
              "timedOut": false,
              "duration": 566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  await axios.delete(`${baseURL}/products/9999`)\n} catch (error) {\n  expect(error.response.data.message).to.equal(\n    \"Product with id '9999' not found\",\n  )\n}",
              "err": {},
              "uuid": "c94a4cd8-d22c-4537-a89e-0c04da0ee5ff",
              "parentUUID": "9f7a1035-b403-498c-b2e9-ba22da2957a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d366fce2-f46c-4de8-9e25-b0cea826772b",
            "aa5d9c03-0832-4c22-ab78-cebbfb62a584",
            "a6751737-c6b8-45d8-b8e9-2ead915a0bff",
            "fe18d864-7112-4d4b-8384-48f51f26787c",
            "c94a4cd8-d22c-4537-a89e-0c04da0ee5ff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1135,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e1c23fcc-c5a8-4479-90fe-28d0ef87c2f8",
          "title": "GET RESTRICTED DATA API TESTING",
          "fullFile": "D:\\PT Pro Sigmaka Mandiri\\Code\\API-Testing-Advanced\\index.test.js",
          "file": "\\index.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GET RESTRICTED DATA API TESTING\"",
              "fullTitle": "GET RESTRICTED DATA API TESTING \"before each\" hook in \"GET RESTRICTED DATA API TESTING\"",
              "timedOut": false,
              "duration": 569,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authResponse = await axios.post(`${baseURL}/auth/login`, {\n  username: 'alexanderj',\n  password: 'alexanderjpass',\n})\ntoken = authResponse.data.token",
              "err": {},
              "uuid": "b4e100ed-58a7-478b-a712-577c7d0757f7",
              "parentUUID": "e1c23fcc-c5a8-4479-90fe-28d0ef87c2f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get auth token",
              "fullTitle": "GET RESTRICTED DATA API TESTING should get auth token",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(token).to.be.a('string')",
              "err": {},
              "uuid": "d3193c07-bcbd-4ce0-bfe3-59511cd150b8",
              "parentUUID": "e1c23fcc-c5a8-4479-90fe-28d0ef87c2f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should access restricted data with valid token",
              "fullTitle": "GET RESTRICTED DATA API TESTING should access restricted data with valid token",
              "timedOut": false,
              "duration": 578,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authConfig = {\n  headers: { Authorization: `Bearer ${token}` },\n}\nconst secureResponse = await axios.get(`${baseURL}/auth/users`, authConfig)\nexpect(secureResponse.status).to.equal(200)",
              "err": {},
              "uuid": "3e2e364a-cb29-49fb-9024-2940c1640a33",
              "parentUUID": "e1c23fcc-c5a8-4479-90fe-28d0ef87c2f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should match users schema",
              "fullTitle": "GET RESTRICTED DATA API TESTING should match users schema",
              "timedOut": false,
              "duration": 569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authConfig = {\n  headers: { Authorization: `Bearer ${token}` },\n}\nconst secureResponse = await axios.get(`${baseURL}/auth/users`, authConfig)\nexpect(secureResponse.data).to.be.jsonSchema(usersSchema)",
              "err": {},
              "uuid": "11d492a0-4251-467f-a538-7dfaa4b4a204",
              "parentUUID": "e1c23fcc-c5a8-4479-90fe-28d0ef87c2f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 401 for invalid token",
              "fullTitle": "GET RESTRICTED DATA API TESTING should return 401 for invalid token",
              "timedOut": false,
              "duration": 569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const authConfig = {\n    headers: { Authorization: 'Bearer invalidtoken' },\n  }\n  await axios.get(`${baseURL}/auth/users`, authConfig)\n} catch (error) {\n  expect(error.response.status).to.equal(401)\n}",
              "err": {},
              "uuid": "b31bd9f0-9663-4d75-a61d-a1ba279df8d9",
              "parentUUID": "e1c23fcc-c5a8-4479-90fe-28d0ef87c2f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return appropriate error message for invalid token",
              "fullTitle": "GET RESTRICTED DATA API TESTING should return appropriate error message for invalid token",
              "timedOut": false,
              "duration": 561,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const authConfig = {\n    headers: { Authorization: 'Bearer invalidtoken' },\n  }\n  await axios.get(`${baseURL}/auth/users`, authConfig)\n} catch (error) {\n  expect(error.response.data.message).to.equal('Invalid/Expired Token!')\n}",
              "err": {},
              "uuid": "573a8cd7-f192-4d31-908a-69ff01035e4d",
              "parentUUID": "e1c23fcc-c5a8-4479-90fe-28d0ef87c2f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 500 for invalid signature",
              "fullTitle": "GET RESTRICTED DATA API TESTING should return 500 for invalid signature",
              "timedOut": false,
              "duration": 567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  const authConfig = {\n    headers: { Authorization: `Bearer ${defaultToken}` },\n  }\n  await axios.get(`${baseURL}/auth/users`, authConfig)\n} catch (error) {\n  expect(error.response.status).to.equal(500)\n}",
              "err": {},
              "uuid": "e31f7dc1-3f51-4e22-96b9-929f8ffdcece",
              "parentUUID": "e1c23fcc-c5a8-4479-90fe-28d0ef87c2f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return appropriate error message for invalid signature",
              "fullTitle": "GET RESTRICTED DATA API TESTING should return appropriate error message for invalid signature",
              "timedOut": false,
              "duration": 567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "skip = true\ntry {\n  const authConfig = {\n    headers: { Authorization: `Bearer ${defaultToken}` },\n  }\n  await axios.get(`${baseURL}/auth/users`, authConfig)\n} catch (error) {\n  expect(error.response.data.message).to.equal('invalid signature')\n}",
              "err": {},
              "uuid": "607417d8-473b-4c72-9686-5f7708b99baf",
              "parentUUID": "e1c23fcc-c5a8-4479-90fe-28d0ef87c2f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3193c07-bcbd-4ce0-bfe3-59511cd150b8",
            "3e2e364a-cb29-49fb-9024-2940c1640a33",
            "11d492a0-4251-467f-a538-7dfaa4b4a204",
            "b31bd9f0-9663-4d75-a61d-a1ba279df8d9",
            "573a8cd7-f192-4d31-908a-69ff01035e4d",
            "e31f7dc1-3f51-4e22-96b9-929f8ffdcece",
            "607417d8-473b-4c72-9686-5f7708b99baf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3412,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}